{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"API Connect Training Labs","text":"<p>This git repo contains samples APIs and methods to demonstrate API Connect capabilities. Each lab has it's own folder structure and the documents inside them will guide you through steps to  be able to develop and try out examples by yourself.</p> <p>### Lab 1: Reviewing the API Connect environment</p> <p>### Lab 2: Managing organizations and catalogs</p> <p>### Lab 3: Developing Hello World API Definition</p> <p>### Lab 4: Developing a microservice with LoopBack 4</p> <p>### Lab 5: Deploying the microservice to OpenShift</p> <p>### Lab 6: Developing the API Definition for microservice</p> <p>### Lab 7: Importing SOAP Service to APIC</p> <p>### Lab 8: Developing message policies</p> <p>### Lab 9: Developing User Defined Policy</p> <p>### Lab 10: Modernizing the web service</p> <p>### Lab 11: Setting Rate and Burst Limits</p> <p>### Lab 12: Testing the Rate and Burst Limits with JMeter</p> <p>### Lab 13: Analytics offloading</p> <p>### Lab 14: Analyzing Analytics</p> <p>### Lab 15: Implementing OAuth Security</p> <p>### Lab 16: Implementing Basic Auth</p> <p>### Lab 17: Implementing API Key Security</p> <p>### Lab 18: Developer Portal</p> <p>### Lab 19: Creating a consumer organization</p> <p>### Lab 20: Running APIC CLI</p> <p>### Lab 21: Implementing CI/CD pipeline with APIC</p> <p>### Lab 22: Managing product lifecycle</p>"},{"location":"#author-ercan-canlier","title":"Author: ERCAN CANLIER","text":""},{"location":"tags/","title":"Tags","text":""},{"location":"lab1/","title":"Lab 1: Setting up your organization","text":""},{"location":"lab1/#purpose-of-this-lab","title":"Purpose of this lab:","text":"<p>By following the steps, this tutorial demonstrates: - Login to the Cloud Manager. - Create an Organization. - Create an Organization Owner for Provider Organization. - Login to the API Manager.</p>"},{"location":"lab1/#step-by-step-guide","title":"Step by step guide:","text":"<p>Follow the steps to set up your organization:</p>"},{"location":"lab1/#step-1-login-to-the-cloud-manager","title":"Step 1. Login to the Cloud Manager","text":""},{"location":"lab1/#step-2-in-the-homepage-select-manage-organizations","title":"Step 2. In the homepage, select Manage organizations","text":""},{"location":"lab1/#step-3-add-a-provider-organization","title":"Step 3. Add a Provider Organization","text":"<ul> <li> <p>Select Add -&gt; Create organization. </p> </li> <li> <p>Enter an organization name. </p> </li> <li> <p>Specify owner of the provider organization. </p> </li> <li> <p>List the provider organizations. </p> </li> </ul>"},{"location":"lab1/#step-4-login-to-the-api-manager","title":"Step 4. Login to the API Manager","text":"<ul> <li> <p>Provide the same username-password pair that you used while creating the owner of organization. </p> </li> <li> <p>Explore API Manager dashboard.</p> </li> </ul> <p></p> <p>DONE: You have just finished setting up your organization.</p>"},{"location":"lab14/","title":"Lab 5: Developing an API that normalizes the response with gateway script","text":""},{"location":"lab14/#purpose-of-this-lab","title":"Purpose of this lab:","text":"<p>By following the steps, this tutorial demonstrates: - Create an API that parses the request body and normalizes the response. - Edit the API definition and add a Parse policy(operation) and Gateway Script policy(operation) to the flow to normalize the response. - Test the response of your API by posting a JSON body in the request.</p>"},{"location":"lab14/#step-by-step-guide","title":"Step by step guide:","text":"<p>Follow the steps to create an API that normalizes the response with gateway script.</p>"},{"location":"lab14/#step-1-create-an-api-definition","title":"Step 1. Create an API Definition","text":"<ul> <li>In the API Manager homepage, select \"Develop APIs and products\".</li> </ul> <ul> <li>Select \"Add\" to develop API.</li> </ul> <ul> <li>On the \"Select API type\" page, select \"New OpenAPI\" and click \"Next\".</li> </ul> <ul> <li>Enter details of the API and click \"Next\".</li> </ul> <ul> <li>A summary displays info for API definition.</li> </ul>"},{"location":"lab14/#step-2-edit-the-api-definition-and-add-a-parse-and-gateway-script-policy","title":"Step 2. Edit the API definition and add a \"Parse\" and \"Gateway Script\" policy","text":"<ul> <li>Delete \"Invoke\" policy from the flow.</li> </ul> <ul> <li>Select \"Parse\" policy and add it to the flow. Rename it to \"Parse request body\" for better readability.</li> </ul> <ul> <li>Select \"GatewayScript\" policy and add it to the flow. Rename it to \"Normalize response\" for better readibility and add below script to the policy. </li> </ul> <pre><code>let response={\n  object:'list',\n  count:0,\n  data:[]\n}\n\nconst countries=context.get('message.body').countries.country;\n\ncountries.forEach(country=&gt;{\n  const newCountry={\n    id:'cntry_' + Math.random().toString(36).substr(2, 9),\n    object:'country',\n    name:country.name,\n    iso_code:country.isoCode,\n    capital_city:country.capitalCity,\n    languages:country.languages.language\n  };\n  response.data.push(newCountry);\n})\nresponse.count=response.data.length;\ncontext.message.body.write(response);\n</code></pre> <ul> <li>Click \"Save\" to save the changes and \"Validate\" to validate your API definition.</li> </ul> <ul> <li>Select \"Online\" to publish the API and test. API will be published to the sandbox.</li> </ul>"},{"location":"lab14/#step-3-test-the-response-of-your-api-by-using-an-user-defined-policy","title":"Step 3. Test the response of your API by using an user defined policy","text":"<ul> <li>Select the \"Test\" tab and select  POST as an operation.</li> </ul> <ul> <li>Select \"Body\" and add below JSON as a request body.</li> </ul> <pre><code>{\n    \"countries\": {\n        \"country\": [\n            {\n                \"name\": \"Andorra\",\n                \"isoCode\": \"AD\",\n                \"capitalCity\": \"Andorra La Ville\",\n                \"languages\": {\n                    \"language\": [\n                        \"Catalan\",\n                        \"Spanish\",\n                        \"French\",\n                        \"Gallegan\",\n                        \"Portuguese\"\n                    ]\n                }\n            },\n            {\n                \"name\": \"United Arab Emirates\",\n                \"isoCode\": \"AE\",\n                \"capitalCity\": \"Abu Dhabi\",\n                \"languages\": {\n                    \"language\": \"Arabic\"\n                }\n            },\n            {\n                \"name\": \"Afghanistan\",\n                \"isoCode\": \"AF\",\n                \"capitalCity\": \"Kabul\",\n                \"languages\": {\n                    \"language\": \"Pushto\"\n                }\n            }\n        ]\n    }\n}\n</code></pre> <ul> <li> <p>Click \"Send\" to test the API. </p> </li> <li> <p>Verify \"Request Body\" is the normalized and sent back as a response.</p> </li> </ul> <p>DONE: You have just finished developing an API that normalizes the response.</p>"},{"location":"lab15/","title":"Lab 4: Developing a loopback REST API that returns the request body as a response","text":""},{"location":"lab15/#purpose-of-this-lab","title":"Purpose of this lab:","text":"<p>By following the steps, this tutorial demonstrates: - Create a REST API definition. - Edit the API definition and add a policy(operation) to the flow to return back the request response. - Test the response of your loopback REST API.</p>"},{"location":"lab15/#step-by-step-guide","title":"Step by step guide:","text":"<p>Follow the steps to create a loopback REST API and test your API to verify the response is same as request.body:</p>"},{"location":"lab15/#step-1-create-an-api-definition","title":"Step 1. Create an API definition","text":"<ul> <li>In the API Manager homepage, select \"Develop APIs and products\".</li> </ul> <ul> <li>Select \"Add\" to develop API.</li> </ul> <ul> <li>On the \"Select API type\" page, select \"New OpenAPI\" and click \"Next\".</li> </ul> <ul> <li>Enter details of the API and click \"Next\".</li> </ul> <ul> <li>Configure the security for the API and click \"Next\".</li> </ul> <ul> <li>A summary displays info for API definition.</li> </ul>"},{"location":"lab15/#step-2-edit-the-api-definition-and-add-a-parse-policy","title":"Step 2. Edit the API definition and add a \"Parse\" policy","text":"<ul> <li>Delete \"Invoke\" policy from the flow.</li> </ul> <ul> <li>Select \"Parse\" policy and add it to the flow. Rename it to \"Parse request body\" for better readability.</li> </ul> <ul> <li>Click \"Validate\" to validate your API definition.</li> </ul> <ul> <li>Select \"Online\" to publish the API and test. API will be published to the sandbox.</li> </ul>"},{"location":"lab15/#step-3-test-loopback-api","title":"Step 3. Test \"Loopback\" API","text":"<ul> <li>Select the \"Test\" tab and select  POST as an operation.</li> </ul> <ul> <li>Select \"Body\" and add a request body.</li> </ul> <ul> <li> <p>Click \"Send\" to test the API. </p> </li> <li> <p>See the \"Request Body\" as a response.</p> </li> </ul> <p></p> <p>DONE: You have just finished creating a loopback API.</p>"},{"location":"lab16/","title":"Lab 3: Adding additional security to \"Hello API Connect\" API","text":""},{"location":"lab16/#purpose-of-this-lab","title":"Purpose of this lab:","text":"<p>By following the steps, this tutorial demonstrates: - Add Client ID security requirements. - Test the response of your \"Hello API Connect\" API by providing Client ID. - Add Client Secret security requirements. - Test the response of your \"Hello API Connect\" API by providing Client ID and Client Secret.</p>"},{"location":"lab16/#step-by-step-guide","title":"Step by step guide:","text":"<p>Follow the steps to add additional security requirements and test your API:</p>"},{"location":"lab16/#step-1-add-client-id-security-requirement","title":"Step 1. Add Client ID security requirement","text":"<ul> <li>In the API Manager homepage, select \"Develop APIs and products\".</li> </ul> <ul> <li>Select \"Hello API Connect\" to edit API definition.</li> </ul> <ul> <li>In the \"Design\" tab, select \"Security Schemes\". As it is shown, API hasn't any security scheme definition.</li> </ul> <ul> <li>Click \"Add\" to add Client ID to \"Security Schemes\".</li> </ul> <p>Fill in the fields listed below and click \"Create\":    - Security Scheme Name (Key): clientID    - Type: apiKey    - Key Type(optional): client_id    - Located in: header    - Variable name: X-IBM-Client-ID</p> <p></p> <ul> <li>Click \"Save\" to save the Client ID security scheme definition.</li> </ul> <p></p> <ul> <li>Select \"Security\" to list the security requirements for your API.</li> </ul> <p></p> <ul> <li>Select Client ID security scheme to add a security requirement to your API and click \"Create\".</li> </ul> <p></p>"},{"location":"lab16/#step-2-test-hello-api-connect-api-by-providing-client-id","title":"Step 2. Test \"Hello API Connect\" API by providing Client ID","text":"<ul> <li>Select the \"Test\" tab and click \"Send\" to test the API.</li> </ul> <ul> <li>See the \"Hello, API Connect\" as a response.</li> </ul> <ul> <li>Delete the X-IBM-Client-ID header from the reuquest and click \"Send\" to test the API.</li> </ul> <ul> <li>Verify that requesting the API with missing Client ID security requirement is denied with a \"401 Unauthorized Error\".</li> </ul>"},{"location":"lab16/#step-3-add-client-secret-security-requirement","title":"Step 3. Add Client Secret security requirement","text":"<ul> <li> <p>Click \"Design\" and \"Security Schemes\" again and click \"Add +\" to add Client Secret as a security scheme.</p> <p>Fill in the fields listed below and click \"Create\":    - Security Scheme Name (Key): clientSecret    - Type: apiKey    - Key Type(optional): client_secret    - Located in: header    - Variable name: X-IBM-Client-Secret</p> </li> </ul> <p></p> <ul> <li>Click \"Save\" to save the Client Secret security scheme definition.</li> </ul> <p></p> <ul> <li>Select \"Security\" to list the security requirements for your API.</li> </ul> <p></p> <ul> <li>Select Client Secret security scheme to add a security requirement to your API and click \"Submit\" and then \"Save\".</li> </ul> <p></p>"},{"location":"lab16/#step-4-test-hello-api-connect-api-by-providing-both-client-id-and-client-secret","title":"Step 4. Test \"Hello API Connect\" API by providing both Client ID and Client Secret","text":"<ul> <li>Select the \"Test\" tab and click \"Send\" to test the API.</li> </ul> <ul> <li>See the \"Hello, API Connect\" as a response.</li> </ul> <ul> <li>Delete the X-IBM-Client-Secret header from the reuquest and click \"Send\" to test the API.</li> </ul> <ul> <li>Verify that requesting the API with missing Client Secret security requirement is denied with a \"401 Unauthorized Error\" as well as we faced before with Client ID security requirement.</li> </ul> <p>DONE: You have just finished adding additional security to \"Hello API Connect\" API</p>"},{"location":"lab17/","title":"Lab 2: Developing \"Hello API Connect\" API","text":""},{"location":"lab17/#purpose-of-this-lab","title":"Purpose of this lab:","text":"<p>By following the steps, this tutorial demonstrates: - Create a simple API definition. - Explore the API definition. - Edit the API definition and add a policy(operation) to the flow. - Test the response of your very first simple \"Hello API Connect\" API.</p>"},{"location":"lab17/#step-by-step-guide","title":"Step by step guide:","text":"<p>Follow the steps to develop and test your very first API:</p>"},{"location":"lab17/#step-1-create-a-simple-api-definition","title":"Step 1. Create a simple API definition","text":"<ul> <li>In the API Manager homepage, select \"Develop APIs and products\".</li> </ul> <ul> <li>Select \"Add\" to develop API.</li> </ul> <ul> <li>On the \"Select API type\" page, select \"New OpenAPI\" and click \"Next\".</li> </ul> <ul> <li>Enter details of the API and click \"Next\".</li> </ul> <ul> <li>Configure the security for the API and click \"Next\".</li> </ul> <ul> <li>A summary displays info for API definition.</li> </ul>"},{"location":"lab17/#step-2-explore-the-api-definition","title":"Step 2. Explore the API definition","text":"<ul> <li>Select \"Edit API\" to open the API editor. The first tab \"Design\" displays details about the API definition.</li> </ul> <ul> <li>\"Gateway\" tab displays the operations in the API. \"Policy\" term is used for operations in API Connect.</li> </ul>"},{"location":"lab17/#step-3-edit-the-api-definition","title":"Step 3. Edit the API definition","text":"<ul> <li>Delete \"Invoke\" policy from the flow.</li> </ul> <ul> <li>Select \"GatewayScript\" policy and add it to the flow. Rename it to \"Set response\" for better readability.</li> </ul> <ul> <li>Add below gateway script to the policy.</li> </ul> <pre><code>const response=\"Hello, API Connect!\";\n\ncontext.message.body.write(response);\n</code></pre> <ul> <li>Click \"Validate\" to validate your API definition.</li> </ul> <ul> <li>Select \"Online\" to publish the API and test. API will be published to the sandbox.</li> </ul>"},{"location":"lab17/#step-4-test-hello-api-connect-api","title":"Step 4. Test \"Hello API Connect\" API","text":"<ul> <li>Select the \"Test\" tab and click \"Send\" to test the API.</li> </ul> <p>NOTE: API endpoint displays /organization/sandbox/base-path as /canlier/sandbox/hello for our API.</p> <ul> <li>Disabled CORS causes this error:</li> </ul> <p></p> <ul> <li>Enable CORS to pass the error.</li> </ul> <p></p> <ul> <li>See the \"Hello, API Connect\" as a response.</li> </ul> <p></p> <p>DONE: You have just finished creating your very first \"Hello API Connect\" API.</p>"},{"location":"lab18/","title":"Lab 1: Setting up your organization","text":""},{"location":"lab18/#purpose-of-this-lab","title":"Purpose of this lab:","text":"<p>By following the steps, this tutorial demonstrates: - Login to the Cloud Manager. - Create an Organization. - Create an Organization Owner for Provider Organization. - Login to the API Manager.</p>"},{"location":"lab18/#step-by-step-guide","title":"Step by step guide:","text":"<p>Follow the steps to set up your organization:</p>"},{"location":"lab18/#step-1-login-to-the-cloud-manager","title":"Step 1. Login to the Cloud Manager","text":""},{"location":"lab18/#step-2-in-the-homepage-select-manage-organizations","title":"Step 2. In the homepage, select Manage organizations","text":""},{"location":"lab18/#step-3-add-a-provider-organization","title":"Step 3. Add a Provider Organization","text":"<ul> <li> <p>Select Add -&gt; Create organization. </p> </li> <li> <p>Enter an organization name. </p> </li> <li> <p>Specify owner of the provider organization. </p> </li> <li> <p>List the provider organizations. </p> </li> </ul>"},{"location":"lab18/#step-4-login-to-the-api-manager","title":"Step 4. Login to the API Manager","text":"<ul> <li> <p>Provide the same username-password pair that you used while creating the owner of organization. </p> </li> <li> <p>Explore API Manager dashboard.</p> </li> </ul> <p></p> <p>DONE: You have just finished setting up your organization.</p>"},{"location":"lab2/","title":"Lab 2: Developing \"Hello API Connect\" API","text":""},{"location":"lab2/#purpose-of-this-lab","title":"Purpose of this lab:","text":"<p>By following the steps, this tutorial demonstrates: - Create a simple API definition. - Explore the API definition. - Edit the API definition and add a policy(operation) to the flow. - Test the response of your very first simple \"Hello API Connect\" API.</p>"},{"location":"lab2/#step-by-step-guide","title":"Step by step guide:","text":"<p>Follow the steps to develop and test your very first API:</p>"},{"location":"lab2/#step-1-create-a-simple-api-definition","title":"Step 1. Create a simple API definition","text":"<ul> <li>In the API Manager homepage, select \"Develop APIs and products\".</li> </ul> <ul> <li>Select \"Add\" to develop API.</li> </ul> <ul> <li>On the \"Select API type\" page, select \"New OpenAPI\" and click \"Next\".</li> </ul> <ul> <li>Enter details of the API and click \"Next\".</li> </ul> <ul> <li>Configure the security for the API and click \"Next\".</li> </ul> <ul> <li>A summary displays info for API definition.</li> </ul>"},{"location":"lab2/#step-2-explore-the-api-definition","title":"Step 2. Explore the API definition","text":"<ul> <li>Select \"Edit API\" to open the API editor. The first tab \"Design\" displays details about the API definition.</li> </ul> <ul> <li>\"Gateway\" tab displays the operations in the API. \"Policy\" term is used for operations in API Connect.</li> </ul>"},{"location":"lab2/#step-3-edit-the-api-definition","title":"Step 3. Edit the API definition","text":"<ul> <li>Delete \"Invoke\" policy from the flow.</li> </ul> <ul> <li>Select \"GatewayScript\" policy and add it to the flow. Rename it to \"Set response\" for better readability.</li> </ul> <ul> <li>Add below gateway script to the policy.</li> </ul> <pre><code>const response=\"Hello, API Connect!\";\n\ncontext.message.body.write(response);\n</code></pre> <ul> <li>Click \"Validate\" to validate your API definition.</li> </ul> <ul> <li>Select \"Online\" to publish the API and test. API will be published to the sandbox.</li> </ul>"},{"location":"lab2/#step-4-test-hello-api-connect-api","title":"Step 4. Test \"Hello API Connect\" API","text":"<ul> <li>Select the \"Test\" tab and click \"Send\" to test the API.</li> </ul> <p>NOTE: API endpoint displays /organization/sandbox/base-path as /canlier/sandbox/hello for our API.</p> <ul> <li>Disabled CORS causes this error:</li> </ul> <p></p> <ul> <li>Enable CORS to pass the error.</li> </ul> <p></p> <ul> <li>See the \"Hello, API Connect\" as a response.</li> </ul> <p></p> <p>DONE: You have just finished creating your very first \"Hello API Connect\" API.</p>"},{"location":"lab3/","title":"Lab 3: Adding additional security to \"Hello API Connect\" API","text":""},{"location":"lab3/#purpose-of-this-lab","title":"Purpose of this lab:","text":"<p>By following the steps, this tutorial demonstrates: - Add Client ID security requirements. - Test the response of your \"Hello API Connect\" API by providing Client ID. - Add Client Secret security requirements. - Test the response of your \"Hello API Connect\" API by providing Client ID and Client Secret.</p>"},{"location":"lab3/#step-by-step-guide","title":"Step by step guide:","text":"<p>Follow the steps to add additional security requirements and test your API:</p>"},{"location":"lab3/#step-1-add-client-id-security-requirement","title":"Step 1. Add Client ID security requirement","text":"<ul> <li>In the API Manager homepage, select \"Develop APIs and products\".</li> </ul> <ul> <li>Select \"Hello API Connect\" to edit API definition.</li> </ul> <ul> <li>In the \"Design\" tab, select \"Security Schemes\". As it is shown, API hasn't any security scheme definition.</li> </ul> <ul> <li>Click \"Add\" to add Client ID to \"Security Schemes\".</li> </ul> <p>Fill in the fields listed below and click \"Create\":    - Security Scheme Name (Key): clientID    - Type: apiKey    - Key Type(optional): client_id    - Located in: header    - Variable name: X-IBM-Client-ID</p> <p></p> <ul> <li>Click \"Save\" to save the Client ID security scheme definition.</li> </ul> <p></p> <ul> <li>Select \"Security\" to list the security requirements for your API.</li> </ul> <p></p> <ul> <li>Select Client ID security scheme to add a security requirement to your API and click \"Create\".</li> </ul> <p></p>"},{"location":"lab3/#step-2-test-hello-api-connect-api-by-providing-client-id","title":"Step 2. Test \"Hello API Connect\" API by providing Client ID","text":"<ul> <li>Select the \"Test\" tab and click \"Send\" to test the API.</li> </ul> <ul> <li>See the \"Hello, API Connect\" as a response.</li> </ul> <ul> <li>Delete the X-IBM-Client-ID header from the reuquest and click \"Send\" to test the API.</li> </ul> <ul> <li>Verify that requesting the API with missing Client ID security requirement is denied with a \"401 Unauthorized Error\".</li> </ul>"},{"location":"lab3/#step-3-add-client-secret-security-requirement","title":"Step 3. Add Client Secret security requirement","text":"<ul> <li> <p>Click \"Design\" and \"Security Schemes\" again and click \"Add +\" to add Client Secret as a security scheme.</p> <p>Fill in the fields listed below and click \"Create\":    - Security Scheme Name (Key): clientSecret    - Type: apiKey    - Key Type(optional): client_secret    - Located in: header    - Variable name: X-IBM-Client-Secret</p> </li> </ul> <p></p> <ul> <li>Click \"Save\" to save the Client Secret security scheme definition.</li> </ul> <p></p> <ul> <li>Select \"Security\" to list the security requirements for your API.</li> </ul> <p></p> <ul> <li>Select Client Secret security scheme to add a security requirement to your API and click \"Submit\" and then \"Save\".</li> </ul> <p></p>"},{"location":"lab3/#step-4-test-hello-api-connect-api-by-providing-both-client-id-and-client-secret","title":"Step 4. Test \"Hello API Connect\" API by providing both Client ID and Client Secret","text":"<ul> <li>Select the \"Test\" tab and click \"Send\" to test the API.</li> </ul> <ul> <li>See the \"Hello, API Connect\" as a response.</li> </ul> <ul> <li>Delete the X-IBM-Client-Secret header from the reuquest and click \"Send\" to test the API.</li> </ul> <ul> <li>Verify that requesting the API with missing Client Secret security requirement is denied with a \"401 Unauthorized Error\" as well as we faced before with Client ID security requirement.</li> </ul> <p>DONE: You have just finished adding additional security to \"Hello API Connect\" API</p>"},{"location":"lab4/","title":"Lab 4: Developing a loopback REST API that returns the request body as a response","text":""},{"location":"lab4/#purpose-of-this-lab","title":"Purpose of this lab:","text":"<p>By following the steps, this tutorial demonstrates: - Create a REST API definition. - Edit the API definition and add a policy(operation) to the flow to return back the request response. - Test the response of your loopback REST API.</p>"},{"location":"lab4/#step-by-step-guide","title":"Step by step guide:","text":"<p>Follow the steps to create a loopback REST API and test your API to verify the response is same as request.body:</p>"},{"location":"lab4/#step-1-create-an-api-definition","title":"Step 1. Create an API definition","text":"<ul> <li>In the API Manager homepage, select \"Develop APIs and products\".</li> </ul> <ul> <li>Select \"Add\" to develop API.</li> </ul> <ul> <li>On the \"Select API type\" page, select \"New OpenAPI\" and click \"Next\".</li> </ul> <ul> <li>Enter details of the API and click \"Next\".</li> </ul> <ul> <li>Configure the security for the API and click \"Next\".</li> </ul> <ul> <li>A summary displays info for API definition.</li> </ul>"},{"location":"lab4/#step-2-edit-the-api-definition-and-add-a-parse-policy","title":"Step 2. Edit the API definition and add a \"Parse\" policy","text":"<ul> <li>Delete \"Invoke\" policy from the flow.</li> </ul> <ul> <li>Select \"Parse\" policy and add it to the flow. Rename it to \"Parse request body\" for better readability.</li> </ul> <ul> <li>Click \"Validate\" to validate your API definition.</li> </ul> <ul> <li>Select \"Online\" to publish the API and test. API will be published to the sandbox.</li> </ul>"},{"location":"lab4/#step-3-test-loopback-api","title":"Step 3. Test \"Loopback\" API","text":"<ul> <li>Select the \"Test\" tab and select  POST as an operation.</li> </ul> <ul> <li>Select \"Body\" and add a request body.</li> </ul> <ul> <li> <p>Click \"Send\" to test the API. </p> </li> <li> <p>See the \"Request Body\" as a response.</p> </li> </ul> <p></p> <p>DONE: You have just finished creating a loopback API.</p>"},{"location":"lab5/","title":"Lab 5: Developing an API that normalizes the response with gateway script","text":""},{"location":"lab5/#purpose-of-this-lab","title":"Purpose of this lab:","text":"<p>By following the steps, this tutorial demonstrates: - Create an API that parses the request body and normalizes the response. - Edit the API definition and add a Parse policy(operation) and Gateway Script policy(operation) to the flow to normalize the response. - Test the response of your API by posting a JSON body in the request.</p>"},{"location":"lab5/#step-by-step-guide","title":"Step by step guide:","text":"<p>Follow the steps to create an API that normalizes the response with gateway script.</p>"},{"location":"lab5/#step-1-create-an-api-definition","title":"Step 1. Create an API Definition","text":"<ul> <li>In the API Manager homepage, select \"Develop APIs and products\".</li> </ul> <ul> <li>Select \"Add\" to develop API.</li> </ul> <ul> <li>On the \"Select API type\" page, select \"New OpenAPI\" and click \"Next\".</li> </ul> <ul> <li>Enter details of the API and click \"Next\".</li> </ul> <ul> <li>A summary displays info for API definition.</li> </ul>"},{"location":"lab5/#step-2-edit-the-api-definition-and-add-a-parse-and-gateway-script-policy","title":"Step 2. Edit the API definition and add a \"Parse\" and \"Gateway Script\" policy","text":"<ul> <li>Delete \"Invoke\" policy from the flow.</li> </ul> <ul> <li>Select \"Parse\" policy and add it to the flow. Rename it to \"Parse request body\" for better readability.</li> </ul> <ul> <li>Select \"GatewayScript\" policy and add it to the flow. Rename it to \"Normalize response\" for better readibility and add below script to the policy. </li> </ul> <pre><code>let response={\n  object:'list',\n  count:0,\n  data:[]\n}\n\nconst countries=context.get('message.body').countries.country;\n\ncountries.forEach(country=&gt;{\n  const newCountry={\n    id:'cntry_' + Math.random().toString(36).substr(2, 9),\n    object:'country',\n    name:country.name,\n    iso_code:country.isoCode,\n    capital_city:country.capitalCity,\n    languages:country.languages.language\n  };\n  response.data.push(newCountry);\n})\nresponse.count=response.data.length;\ncontext.message.body.write(response);\n</code></pre> <ul> <li>Click \"Save\" to save the changes and \"Validate\" to validate your API definition.</li> </ul> <ul> <li>Select \"Online\" to publish the API and test. API will be published to the sandbox.</li> </ul>"},{"location":"lab5/#step-3-test-the-response-of-your-api-by-using-an-user-defined-policy","title":"Step 3. Test the response of your API by using an user defined policy","text":"<ul> <li>Select the \"Test\" tab and select  POST as an operation.</li> </ul> <ul> <li>Select \"Body\" and add below JSON as a request body.</li> </ul> <pre><code>{\n    \"countries\": {\n        \"country\": [\n            {\n                \"name\": \"Andorra\",\n                \"isoCode\": \"AD\",\n                \"capitalCity\": \"Andorra La Ville\",\n                \"languages\": {\n                    \"language\": [\n                        \"Catalan\",\n                        \"Spanish\",\n                        \"French\",\n                        \"Gallegan\",\n                        \"Portuguese\"\n                    ]\n                }\n            },\n            {\n                \"name\": \"United Arab Emirates\",\n                \"isoCode\": \"AE\",\n                \"capitalCity\": \"Abu Dhabi\",\n                \"languages\": {\n                    \"language\": \"Arabic\"\n                }\n            },\n            {\n                \"name\": \"Afghanistan\",\n                \"isoCode\": \"AF\",\n                \"capitalCity\": \"Kabul\",\n                \"languages\": {\n                    \"language\": \"Pushto\"\n                }\n            }\n        ]\n    }\n}\n</code></pre> <ul> <li> <p>Click \"Send\" to test the API. </p> </li> <li> <p>Verify \"Request Body\" is the normalized and sent back as a response.</p> </li> </ul> <p>DONE: You have just finished developing an API that normalizes the response.</p>"},{"location":"tags/","title":"Tags","text":""}]}